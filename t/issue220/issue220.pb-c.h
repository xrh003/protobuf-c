/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: t/issue220/issue220.proto */

#ifndef PROTOBUF_C_t_2fissue220_2fissue220_2eproto__INCLUDED
#define PROTOBUF_C_t_2fissue220_2fissue220_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1002001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _TopLevel TopLevel;
typedef struct _MessageType1 MessageType1;
typedef struct _MessageType2 MessageType2;


/* --- enums --- */

typedef enum _MessageType1__Flag {
  MESSAGE_TYPE1__FLAG__OK = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(MESSAGE_TYPE1__FLAG)
} MessageType1__Flag;
typedef enum _MessageType2__AnotherFlag {
  MESSAGE_TYPE2__ANOTHER_FLAG__OK = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(MESSAGE_TYPE2__ANOTHER_FLAG)
} MessageType2__AnotherFlag;

/* --- messages --- */

typedef enum {
  TOP_LEVEL__SUBMESSAGES__NOT_SET = 0,
  TOP_LEVEL__SUBMESSAGES_TYPE1 = 1,
  TOP_LEVEL__SUBMESSAGES_TYPE2 = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(TOP_LEVEL__SUBMESSAGES)
} TopLevel__SubmessagesCase;

struct  _TopLevel
{
  ProtobufCMessage base;
  TopLevel__SubmessagesCase submessages_case;
  union {
    MessageType1 *type1;
    MessageType2 *type2;
  };
};
#define TOP_LEVEL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&top_level__descriptor) \
    , TOP_LEVEL__SUBMESSAGES__NOT_SET, {0} }


struct  _MessageType1
{
  ProtobufCMessage base;
  protobuf_c_boolean has_flag;
  MessageType1__Flag flag;
};
#define MESSAGE_TYPE1__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&message_type1__descriptor) \
    , 0, MESSAGE_TYPE1__FLAG__OK }


struct  _MessageType2
{
  ProtobufCMessage base;
  protobuf_c_boolean has_flag;
  MessageType2__AnotherFlag flag;
};
#define MESSAGE_TYPE2__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&message_type2__descriptor) \
    , 0, MESSAGE_TYPE2__ANOTHER_FLAG__OK }


/* TopLevel methods */
void   top_level__init
                     (TopLevel         *message);
size_t top_level__get_packed_size
                     (const TopLevel   *message);
size_t top_level__pack
                     (const TopLevel   *message,
                      uint8_t             *out);
size_t top_level__pack_to_buffer
                     (const TopLevel   *message,
                      ProtobufCBuffer     *buffer);
TopLevel *
       top_level__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   top_level__free_unpacked
                     (TopLevel *message,
                      ProtobufCAllocator *allocator);
/* MessageType1 methods */
void   message_type1__init
                     (MessageType1         *message);
size_t message_type1__get_packed_size
                     (const MessageType1   *message);
size_t message_type1__pack
                     (const MessageType1   *message,
                      uint8_t             *out);
size_t message_type1__pack_to_buffer
                     (const MessageType1   *message,
                      ProtobufCBuffer     *buffer);
MessageType1 *
       message_type1__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   message_type1__free_unpacked
                     (MessageType1 *message,
                      ProtobufCAllocator *allocator);
/* MessageType2 methods */
void   message_type2__init
                     (MessageType2         *message);
size_t message_type2__get_packed_size
                     (const MessageType2   *message);
size_t message_type2__pack
                     (const MessageType2   *message,
                      uint8_t             *out);
size_t message_type2__pack_to_buffer
                     (const MessageType2   *message,
                      ProtobufCBuffer     *buffer);
MessageType2 *
       message_type2__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   message_type2__free_unpacked
                     (MessageType2 *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*TopLevel_Closure)
                 (const TopLevel *message,
                  void *closure_data);
typedef void (*MessageType1_Closure)
                 (const MessageType1 *message,
                  void *closure_data);
typedef void (*MessageType2_Closure)
                 (const MessageType2 *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor top_level__descriptor;
extern const ProtobufCMessageDescriptor message_type1__descriptor;
extern const ProtobufCEnumDescriptor    message_type1__flag__descriptor;
extern const ProtobufCMessageDescriptor message_type2__descriptor;
extern const ProtobufCEnumDescriptor    message_type2__another_flag__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_t_2fissue220_2fissue220_2eproto__INCLUDED */
