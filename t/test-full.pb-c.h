/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: t/test-full.proto */

#ifndef PROTOBUF_C_t_2ftest_2dfull_2eproto__INCLUDED
#define PROTOBUF_C_t_2ftest_2dfull_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1002001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _Foo__SubMess Foo__SubMess;
typedef struct _Foo__SubMess__SubSubMess Foo__SubMess__SubSubMess;
typedef struct _Foo__TestFieldNo15 Foo__TestFieldNo15;
typedef struct _Foo__TestFieldNo16 Foo__TestFieldNo16;
typedef struct _Foo__TestFieldNo2047 Foo__TestFieldNo2047;
typedef struct _Foo__TestFieldNo2048 Foo__TestFieldNo2048;
typedef struct _Foo__TestFieldNo262143 Foo__TestFieldNo262143;
typedef struct _Foo__TestFieldNo262144 Foo__TestFieldNo262144;
typedef struct _Foo__TestFieldNo33554431 Foo__TestFieldNo33554431;
typedef struct _Foo__TestFieldNo33554432 Foo__TestFieldNo33554432;
typedef struct _Foo__TestMess Foo__TestMess;
typedef struct _Foo__TestMessPacked Foo__TestMessPacked;
typedef struct _Foo__TestMessOptional Foo__TestMessOptional;
typedef struct _Foo__TestMessOneof Foo__TestMessOneof;
typedef struct _Foo__TestMessRequiredInt32 Foo__TestMessRequiredInt32;
typedef struct _Foo__TestMessRequiredSInt32 Foo__TestMessRequiredSInt32;
typedef struct _Foo__TestMessRequiredSFixed32 Foo__TestMessRequiredSFixed32;
typedef struct _Foo__TestMessRequiredInt64 Foo__TestMessRequiredInt64;
typedef struct _Foo__TestMessRequiredSInt64 Foo__TestMessRequiredSInt64;
typedef struct _Foo__TestMessRequiredSFixed64 Foo__TestMessRequiredSFixed64;
typedef struct _Foo__TestMessRequiredUInt32 Foo__TestMessRequiredUInt32;
typedef struct _Foo__TestMessRequiredFixed32 Foo__TestMessRequiredFixed32;
typedef struct _Foo__TestMessRequiredUInt64 Foo__TestMessRequiredUInt64;
typedef struct _Foo__TestMessRequiredFixed64 Foo__TestMessRequiredFixed64;
typedef struct _Foo__TestMessRequiredFloat Foo__TestMessRequiredFloat;
typedef struct _Foo__TestMessRequiredDouble Foo__TestMessRequiredDouble;
typedef struct _Foo__TestMessRequiredBool Foo__TestMessRequiredBool;
typedef struct _Foo__TestMessRequiredEnum Foo__TestMessRequiredEnum;
typedef struct _Foo__TestMessRequiredEnumSmall Foo__TestMessRequiredEnumSmall;
typedef struct _Foo__TestMessRequiredString Foo__TestMessRequiredString;
typedef struct _Foo__TestMessRequiredBytes Foo__TestMessRequiredBytes;
typedef struct _Foo__TestMessRequiredMessage Foo__TestMessRequiredMessage;
typedef struct _Foo__EmptyMess Foo__EmptyMess;
typedef struct _Foo__DefaultRequiredValues Foo__DefaultRequiredValues;
typedef struct _Foo__DefaultOptionalValues Foo__DefaultOptionalValues;
typedef struct _Foo__LowerCase Foo__LowerCase;
typedef struct _Foo__AllocValues Foo__AllocValues;
typedef struct _Foo__TestRequiredFieldsBitmap Foo__TestRequiredFieldsBitmap;
typedef struct _Foo__TestFieldFlags Foo__TestFieldFlags;
typedef struct _Foo__TestMessageCheck Foo__TestMessageCheck;
typedef struct _Foo__TestMessageCheck__SubMessage Foo__TestMessageCheck__SubMessage;
typedef struct _Foo__TestMessSubMess Foo__TestMessSubMess;


/* --- enums --- */

typedef enum _Foo__LowerCase__CaseEnum {
  FOO__LOWER_CASE__CASE_ENUM__UPPER = 1,
  FOO__LOWER_CASE__CASE_ENUM__lower = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(FOO__LOWER_CASE__CASE_ENUM)
} Foo__LowerCase__CaseEnum;
typedef enum _Foo__TestEnumSmall {
  FOO__TEST_ENUM_SMALL__NEG_VALUE = -1,
  FOO__TEST_ENUM_SMALL__VALUE = 0,
  FOO__TEST_ENUM_SMALL__OTHER_VALUE = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(FOO__TEST_ENUM_SMALL)
} Foo__TestEnumSmall;
/*
 * these number are specifically chosen to test the
 * boundaries of when an enum requires a certain number of bytes.
 * e.g. 16383 requires 3 bytes; 16384 requires 4.
 */
typedef enum _Foo__TestEnum {
  FOO__TEST_ENUM__VALUENEG123456 = -123456,
  FOO__TEST_ENUM__VALUENEG1 = -1,
  FOO__TEST_ENUM__VALUE0 = 0,
  FOO__TEST_ENUM__VALUE1 = 1,
  FOO__TEST_ENUM__VALUE127 = 127,
  FOO__TEST_ENUM__VALUE128 = 128,
  FOO__TEST_ENUM__VALUE16383 = 16383,
  FOO__TEST_ENUM__VALUE16384 = 16384,
  FOO__TEST_ENUM__VALUE2097151 = 2097151,
  FOO__TEST_ENUM__VALUE2097152 = 2097152,
  FOO__TEST_ENUM__VALUE268435455 = 268435455,
  FOO__TEST_ENUM__VALUE268435456 = 268435456
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(FOO__TEST_ENUM)
} Foo__TestEnum;
typedef enum _Foo__TestEnumDupValues {
  FOO__TEST_ENUM_DUP_VALUES__VALUE_A = 42,
  FOO__TEST_ENUM_DUP_VALUES__VALUE_B = 42,
  FOO__TEST_ENUM_DUP_VALUES__VALUE_C = 42,
  FOO__TEST_ENUM_DUP_VALUES__VALUE_D = 666,
  FOO__TEST_ENUM_DUP_VALUES__VALUE_E = 666,
  FOO__TEST_ENUM_DUP_VALUES__VALUE_F = 1000,
  FOO__TEST_ENUM_DUP_VALUES__VALUE_AA = 1000,
  FOO__TEST_ENUM_DUP_VALUES__VALUE_BB = 1001
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(FOO__TEST_ENUM_DUP_VALUES)
} Foo__TestEnumDupValues;

/* --- messages --- */

struct  _Foo__SubMess__SubSubMess
{
  ProtobufCMessage base;
  protobuf_c_boolean has_val1;
  int32_t val1;
  size_t n_rep;
  int32_t *rep;
  protobuf_c_boolean has_bytes1;
  ProtobufCBinaryData bytes1;
  char *str1;
};
extern uint8_t foo__sub_mess__sub_sub_mess__bytes1__default_value_data[];
extern char foo__sub_mess__sub_sub_mess__str1__default_value[];
#define FOO__SUB_MESS__SUB_SUB_MESS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&foo__sub_mess__sub_sub_mess__descriptor) \
    , 0, 100, 0,NULL, 0, { 8, foo__sub_mess__sub_sub_mess__bytes1__default_value_data }, foo__sub_mess__sub_sub_mess__str1__default_value }


struct  _Foo__SubMess
{
  ProtobufCMessage base;
  int32_t test;
  protobuf_c_boolean has_val1;
  int32_t val1;
  protobuf_c_boolean has_val2;
  int32_t val2;
  size_t n_rep;
  int32_t *rep;
  Foo__SubMess__SubSubMess *sub1;
  Foo__SubMess__SubSubMess *sub2;
};
#define FOO__SUB_MESS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&foo__sub_mess__descriptor) \
    , 0, 0, 0, 0, 0, 0,NULL, NULL, NULL }


struct  _Foo__TestFieldNo15
{
  ProtobufCMessage base;
  char *test;
};
#define FOO__TEST_FIELD_NO15__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&foo__test_field_no15__descriptor) \
    , NULL }


struct  _Foo__TestFieldNo16
{
  ProtobufCMessage base;
  char *test;
};
#define FOO__TEST_FIELD_NO16__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&foo__test_field_no16__descriptor) \
    , NULL }


struct  _Foo__TestFieldNo2047
{
  ProtobufCMessage base;
  char *test;
};
#define FOO__TEST_FIELD_NO2047__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&foo__test_field_no2047__descriptor) \
    , NULL }


struct  _Foo__TestFieldNo2048
{
  ProtobufCMessage base;
  char *test;
};
#define FOO__TEST_FIELD_NO2048__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&foo__test_field_no2048__descriptor) \
    , NULL }


struct  _Foo__TestFieldNo262143
{
  ProtobufCMessage base;
  char *test;
};
#define FOO__TEST_FIELD_NO262143__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&foo__test_field_no262143__descriptor) \
    , NULL }


struct  _Foo__TestFieldNo262144
{
  ProtobufCMessage base;
  char *test;
};
#define FOO__TEST_FIELD_NO262144__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&foo__test_field_no262144__descriptor) \
    , NULL }


struct  _Foo__TestFieldNo33554431
{
  ProtobufCMessage base;
  char *test;
};
#define FOO__TEST_FIELD_NO33554431__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&foo__test_field_no33554431__descriptor) \
    , NULL }


struct  _Foo__TestFieldNo33554432
{
  ProtobufCMessage base;
  char *test;
};
#define FOO__TEST_FIELD_NO33554432__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&foo__test_field_no33554432__descriptor) \
    , NULL }


struct  _Foo__TestMess
{
  ProtobufCMessage base;
  size_t n_test_int32;
  int32_t *test_int32;
  size_t n_test_sint32;
  int32_t *test_sint32;
  size_t n_test_sfixed32;
  int32_t *test_sfixed32;
  size_t n_test_int64;
  int64_t *test_int64;
  size_t n_test_sint64;
  int64_t *test_sint64;
  size_t n_test_sfixed64;
  int64_t *test_sfixed64;
  size_t n_test_uint32;
  uint32_t *test_uint32;
  size_t n_test_fixed32;
  uint32_t *test_fixed32;
  size_t n_test_uint64;
  uint64_t *test_uint64;
  size_t n_test_fixed64;
  uint64_t *test_fixed64;
  size_t n_test_float;
  float *test_float;
  size_t n_test_double;
  double *test_double;
  size_t n_test_boolean;
  protobuf_c_boolean *test_boolean;
  size_t n_test_enum_small;
  Foo__TestEnumSmall *test_enum_small;
  size_t n_test_enum;
  Foo__TestEnum *test_enum;
  size_t n_test_string;
  char **test_string;
  size_t n_test_bytes;
  ProtobufCBinaryData *test_bytes;
  size_t n_test_message;
  Foo__SubMess **test_message;
};
#define FOO__TEST_MESS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&foo__test_mess__descriptor) \
    , 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL }


struct  _Foo__TestMessPacked
{
  ProtobufCMessage base;
  size_t n_test_int32;
  int32_t *test_int32;
  size_t n_test_sint32;
  int32_t *test_sint32;
  size_t n_test_sfixed32;
  int32_t *test_sfixed32;
  size_t n_test_int64;
  int64_t *test_int64;
  size_t n_test_sint64;
  int64_t *test_sint64;
  size_t n_test_sfixed64;
  int64_t *test_sfixed64;
  size_t n_test_uint32;
  uint32_t *test_uint32;
  size_t n_test_fixed32;
  uint32_t *test_fixed32;
  size_t n_test_uint64;
  uint64_t *test_uint64;
  size_t n_test_fixed64;
  uint64_t *test_fixed64;
  size_t n_test_float;
  float *test_float;
  size_t n_test_double;
  double *test_double;
  size_t n_test_boolean;
  protobuf_c_boolean *test_boolean;
  size_t n_test_enum_small;
  Foo__TestEnumSmall *test_enum_small;
  size_t n_test_enum;
  Foo__TestEnum *test_enum;
};
#define FOO__TEST_MESS_PACKED__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&foo__test_mess_packed__descriptor) \
    , 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL }


struct  _Foo__TestMessOptional
{
  ProtobufCMessage base;
  protobuf_c_boolean has_test_int32;
  int32_t test_int32;
  protobuf_c_boolean has_test_sint32;
  int32_t test_sint32;
  protobuf_c_boolean has_test_sfixed32;
  int32_t test_sfixed32;
  protobuf_c_boolean has_test_int64;
  int64_t test_int64;
  protobuf_c_boolean has_test_sint64;
  int64_t test_sint64;
  protobuf_c_boolean has_test_sfixed64;
  int64_t test_sfixed64;
  protobuf_c_boolean has_test_uint32;
  uint32_t test_uint32;
  protobuf_c_boolean has_test_fixed32;
  uint32_t test_fixed32;
  protobuf_c_boolean has_test_uint64;
  uint64_t test_uint64;
  protobuf_c_boolean has_test_fixed64;
  uint64_t test_fixed64;
  protobuf_c_boolean has_test_float;
  float test_float;
  protobuf_c_boolean has_test_double;
  double test_double;
  protobuf_c_boolean has_test_boolean;
  protobuf_c_boolean test_boolean;
  protobuf_c_boolean has_test_enum_small;
  Foo__TestEnumSmall test_enum_small;
  protobuf_c_boolean has_test_enum;
  Foo__TestEnum test_enum;
  char *test_string;
  protobuf_c_boolean has_test_bytes;
  ProtobufCBinaryData test_bytes;
  Foo__SubMess *test_message;
};
#define FOO__TEST_MESS_OPTIONAL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&foo__test_mess_optional__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, FOO__TEST_ENUM_SMALL__NEG_VALUE, 0, FOO__TEST_ENUM__VALUENEG123456, NULL, 0, {0,NULL}, NULL }


typedef enum {
  FOO__TEST_MESS_ONEOF__TEST_ONEOF__NOT_SET = 0,
  FOO__TEST_MESS_ONEOF__TEST_ONEOF_TEST_INT32 = 1,
  FOO__TEST_MESS_ONEOF__TEST_ONEOF_TEST_SINT32 = 2,
  FOO__TEST_MESS_ONEOF__TEST_ONEOF_TEST_SFIXED32 = 3,
  FOO__TEST_MESS_ONEOF__TEST_ONEOF_TEST_INT64 = 4,
  FOO__TEST_MESS_ONEOF__TEST_ONEOF_TEST_SINT64 = 5,
  FOO__TEST_MESS_ONEOF__TEST_ONEOF_TEST_SFIXED64 = 6,
  FOO__TEST_MESS_ONEOF__TEST_ONEOF_TEST_UINT32 = 7,
  FOO__TEST_MESS_ONEOF__TEST_ONEOF_TEST_FIXED32 = 8,
  FOO__TEST_MESS_ONEOF__TEST_ONEOF_TEST_UINT64 = 9,
  FOO__TEST_MESS_ONEOF__TEST_ONEOF_TEST_FIXED64 = 10,
  FOO__TEST_MESS_ONEOF__TEST_ONEOF_TEST_FLOAT = 11,
  FOO__TEST_MESS_ONEOF__TEST_ONEOF_TEST_DOUBLE = 12,
  FOO__TEST_MESS_ONEOF__TEST_ONEOF_TEST_BOOLEAN = 13,
  FOO__TEST_MESS_ONEOF__TEST_ONEOF_TEST_ENUM_SMALL = 14,
  FOO__TEST_MESS_ONEOF__TEST_ONEOF_TEST_ENUM = 15,
  FOO__TEST_MESS_ONEOF__TEST_ONEOF_TEST_STRING = 16,
  FOO__TEST_MESS_ONEOF__TEST_ONEOF_TEST_BYTES = 17,
  FOO__TEST_MESS_ONEOF__TEST_ONEOF_TEST_MESSAGE = 18
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(FOO__TEST_MESS_ONEOF__TEST_ONEOF)
} Foo__TestMessOneof__TestOneofCase;

struct  _Foo__TestMessOneof
{
  ProtobufCMessage base;
  protobuf_c_boolean has_opt_int;
  int32_t opt_int;
  Foo__TestMessOneof__TestOneofCase test_oneof_case;
  union {
    int32_t test_int32;
    int32_t test_sint32;
    int32_t test_sfixed32;
    int64_t test_int64;
    int64_t test_sint64;
    int64_t test_sfixed64;
    uint32_t test_uint32;
    uint32_t test_fixed32;
    uint64_t test_uint64;
    uint64_t test_fixed64;
    float test_float;
    double test_double;
    protobuf_c_boolean test_boolean;
    Foo__TestEnumSmall test_enum_small;
    Foo__TestEnum test_enum;
    char *test_string;
    ProtobufCBinaryData test_bytes;
    Foo__SubMess *test_message;
  };
};
#define FOO__TEST_MESS_ONEOF__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&foo__test_mess_oneof__descriptor) \
    , 0, 0, FOO__TEST_MESS_ONEOF__TEST_ONEOF__NOT_SET, {0} }


struct  _Foo__TestMessRequiredInt32
{
  ProtobufCMessage base;
  int32_t test;
};
#define FOO__TEST_MESS_REQUIRED_INT32__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&foo__test_mess_required_int32__descriptor) \
    , 0 }


struct  _Foo__TestMessRequiredSInt32
{
  ProtobufCMessage base;
  int32_t test;
};
#define FOO__TEST_MESS_REQUIRED_SINT32__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&foo__test_mess_required_sint32__descriptor) \
    , 0 }


struct  _Foo__TestMessRequiredSFixed32
{
  ProtobufCMessage base;
  int32_t test;
};
#define FOO__TEST_MESS_REQUIRED_SFIXED32__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&foo__test_mess_required_sfixed32__descriptor) \
    , 0 }


struct  _Foo__TestMessRequiredInt64
{
  ProtobufCMessage base;
  int64_t test;
};
#define FOO__TEST_MESS_REQUIRED_INT64__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&foo__test_mess_required_int64__descriptor) \
    , 0 }


struct  _Foo__TestMessRequiredSInt64
{
  ProtobufCMessage base;
  int64_t test;
};
#define FOO__TEST_MESS_REQUIRED_SINT64__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&foo__test_mess_required_sint64__descriptor) \
    , 0 }


struct  _Foo__TestMessRequiredSFixed64
{
  ProtobufCMessage base;
  int64_t test;
};
#define FOO__TEST_MESS_REQUIRED_SFIXED64__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&foo__test_mess_required_sfixed64__descriptor) \
    , 0 }


struct  _Foo__TestMessRequiredUInt32
{
  ProtobufCMessage base;
  uint32_t test;
};
#define FOO__TEST_MESS_REQUIRED_UINT32__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&foo__test_mess_required_uint32__descriptor) \
    , 0 }


struct  _Foo__TestMessRequiredFixed32
{
  ProtobufCMessage base;
  uint32_t test;
};
#define FOO__TEST_MESS_REQUIRED_FIXED32__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&foo__test_mess_required_fixed32__descriptor) \
    , 0 }


struct  _Foo__TestMessRequiredUInt64
{
  ProtobufCMessage base;
  uint64_t test;
};
#define FOO__TEST_MESS_REQUIRED_UINT64__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&foo__test_mess_required_uint64__descriptor) \
    , 0 }


struct  _Foo__TestMessRequiredFixed64
{
  ProtobufCMessage base;
  uint64_t test;
};
#define FOO__TEST_MESS_REQUIRED_FIXED64__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&foo__test_mess_required_fixed64__descriptor) \
    , 0 }


struct  _Foo__TestMessRequiredFloat
{
  ProtobufCMessage base;
  float test;
};
#define FOO__TEST_MESS_REQUIRED_FLOAT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&foo__test_mess_required_float__descriptor) \
    , 0 }


struct  _Foo__TestMessRequiredDouble
{
  ProtobufCMessage base;
  double test;
};
#define FOO__TEST_MESS_REQUIRED_DOUBLE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&foo__test_mess_required_double__descriptor) \
    , 0 }


struct  _Foo__TestMessRequiredBool
{
  ProtobufCMessage base;
  protobuf_c_boolean test;
};
#define FOO__TEST_MESS_REQUIRED_BOOL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&foo__test_mess_required_bool__descriptor) \
    , 0 }


struct  _Foo__TestMessRequiredEnum
{
  ProtobufCMessage base;
  Foo__TestEnum test;
};
#define FOO__TEST_MESS_REQUIRED_ENUM__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&foo__test_mess_required_enum__descriptor) \
    , FOO__TEST_ENUM__VALUENEG123456 }


struct  _Foo__TestMessRequiredEnumSmall
{
  ProtobufCMessage base;
  Foo__TestEnumSmall test;
};
#define FOO__TEST_MESS_REQUIRED_ENUM_SMALL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&foo__test_mess_required_enum_small__descriptor) \
    , FOO__TEST_ENUM_SMALL__NEG_VALUE }


struct  _Foo__TestMessRequiredString
{
  ProtobufCMessage base;
  char *test;
};
#define FOO__TEST_MESS_REQUIRED_STRING__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&foo__test_mess_required_string__descriptor) \
    , NULL }


struct  _Foo__TestMessRequiredBytes
{
  ProtobufCMessage base;
  ProtobufCBinaryData test;
};
#define FOO__TEST_MESS_REQUIRED_BYTES__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&foo__test_mess_required_bytes__descriptor) \
    , {0,NULL} }


struct  _Foo__TestMessRequiredMessage
{
  ProtobufCMessage base;
  Foo__SubMess *test;
};
#define FOO__TEST_MESS_REQUIRED_MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&foo__test_mess_required_message__descriptor) \
    , NULL }


struct  _Foo__EmptyMess
{
  ProtobufCMessage base;
};
#define FOO__EMPTY_MESS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&foo__empty_mess__descriptor) \
     }


struct  _Foo__DefaultRequiredValues
{
  ProtobufCMessage base;
  int32_t v_int32;
  uint32_t v_uint32;
  int32_t v_int64;
  uint32_t v_uint64;
  float v_float;
  double v_double;
  char *v_string;
  ProtobufCBinaryData v_bytes;
};
extern char foo__default_required_values__v_string__default_value[];
extern uint8_t foo__default_required_values__v_bytes__default_value_data[];
#define FOO__DEFAULT_REQUIRED_VALUES__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&foo__default_required_values__descriptor) \
    , -42, 666u, 100000, 100001u, 2.5, 4.5, foo__default_required_values__v_string__default_value, { 13, foo__default_required_values__v_bytes__default_value_data } }


struct  _Foo__DefaultOptionalValues
{
  ProtobufCMessage base;
  protobuf_c_boolean has_v_int32;
  int32_t v_int32;
  protobuf_c_boolean has_v_uint32;
  uint32_t v_uint32;
  protobuf_c_boolean has_v_int64;
  int32_t v_int64;
  protobuf_c_boolean has_v_uint64;
  uint32_t v_uint64;
  protobuf_c_boolean has_v_float;
  float v_float;
  protobuf_c_boolean has_v_double;
  double v_double;
  char *v_string;
  protobuf_c_boolean has_v_bytes;
  ProtobufCBinaryData v_bytes;
};
extern char foo__default_optional_values__v_string__default_value[];
extern uint8_t foo__default_optional_values__v_bytes__default_value_data[];
#define FOO__DEFAULT_OPTIONAL_VALUES__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&foo__default_optional_values__descriptor) \
    , 0, -42, 0, 666u, 0, 100000, 0, 100001u, 0, 2.5, 0, 4.5, foo__default_optional_values__v_string__default_value, 0, { 13, foo__default_optional_values__v_bytes__default_value_data } }


struct  _Foo__LowerCase
{
  ProtobufCMessage base;
  protobuf_c_boolean has_value;
  Foo__LowerCase__CaseEnum value;
};
#define FOO__LOWER_CASE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&foo__lower_case__descriptor) \
    , 0, FOO__LOWER_CASE__CASE_ENUM__lower }


struct  _Foo__AllocValues
{
  ProtobufCMessage base;
  protobuf_c_boolean has_o_bytes;
  ProtobufCBinaryData o_bytes;
  size_t n_r_string;
  char **r_string;
  char *a_string;
  ProtobufCBinaryData a_bytes;
  Foo__DefaultRequiredValues *a_mess;
};
#define FOO__ALLOC_VALUES__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&foo__alloc_values__descriptor) \
    , 0, {0,NULL}, 0,NULL, NULL, {0,NULL}, NULL }


struct  _Foo__TestRequiredFieldsBitmap
{
  ProtobufCMessage base;
  char *field1;
  char *field2;
  char *field3;
  char *field4;
  char *field5;
  char *field6;
  char *field7;
  char *field8;
  char *field9;
  char *field10;
  char *field11;
  char *field12;
  char *field13;
  char *field14;
  char *field15;
  char *field16;
  char *field17;
  char *field18;
  char *field19;
  char *field20;
  char *field21;
  char *field22;
  char *field23;
  char *field24;
  char *field25;
  char *field26;
  char *field27;
  char *field28;
  char *field29;
  char *field30;
  char *field31;
  char *field32;
  char *field33;
  char *field34;
  char *field35;
  char *field36;
  char *field37;
  char *field38;
  char *field39;
  char *field40;
  char *field41;
  char *field42;
  char *field43;
  char *field44;
  char *field45;
  char *field46;
  char *field47;
  char *field48;
  char *field49;
  char *field50;
  char *field51;
  char *field52;
  char *field53;
  char *field54;
  char *field55;
  char *field56;
  char *field57;
  char *field58;
  char *field59;
  char *field60;
  char *field61;
  char *field62;
  char *field63;
  char *field64;
  char *field65;
  char *field66;
  char *field67;
  char *field68;
  char *field69;
  char *field70;
  char *field71;
  char *field72;
  char *field73;
  char *field74;
  char *field75;
  char *field76;
  char *field77;
  char *field78;
  char *field79;
  char *field80;
  char *field81;
  char *field82;
  char *field83;
  char *field84;
  char *field85;
  char *field86;
  char *field87;
  char *field88;
  char *field89;
  char *field90;
  char *field91;
  char *field92;
  char *field93;
  char *field94;
  char *field95;
  char *field96;
  char *field97;
  char *field98;
  char *field99;
  char *field100;
  char *field101;
  char *field102;
  char *field103;
  char *field104;
  char *field105;
  char *field106;
  char *field107;
  char *field108;
  char *field109;
  char *field110;
  char *field111;
  char *field112;
  char *field113;
  char *field114;
  char *field115;
  char *field116;
  char *field117;
  char *field118;
  char *field119;
  char *field120;
  char *field121;
  char *field122;
  char *field123;
  char *field124;
  char *field125;
  char *field126;
  char *field127;
  char *field128;
  char *field129;
};
#define FOO__TEST_REQUIRED_FIELDS_BITMAP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&foo__test_required_fields_bitmap__descriptor) \
}


struct  _Foo__TestFieldFlags
{
  ProtobufCMessage base;
  protobuf_c_boolean has_no_flags1;
  int32_t no_flags1;
  int32_t no_flags2;
  size_t n_no_flags3;
  int32_t *no_flags3;
  size_t n_packed;
  int32_t *packed;
  size_t n_packed_deprecated PROTOBUF_C__DEPRECATED;
  int32_t *packed_deprecated PROTOBUF_C__DEPRECATED;
  size_t n_deprecated PROTOBUF_C__DEPRECATED;
  int32_t *deprecated PROTOBUF_C__DEPRECATED;
};
#define FOO__TEST_FIELD_FLAGS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&foo__test_field_flags__descriptor) \
    , 0, 0, 0, 0,NULL, 0,NULL, 0,NULL, 0,NULL }


struct  _Foo__TestMessageCheck__SubMessage
{
  ProtobufCMessage base;
  char *str;
};
#define FOO__TEST_MESSAGE_CHECK__SUB_MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&foo__test_message_check__sub_message__descriptor) \
    , NULL }


struct  _Foo__TestMessageCheck
{
  ProtobufCMessage base;
  Foo__TestMessageCheck__SubMessage *required_msg;
  size_t n_repeated_msg;
  Foo__TestMessageCheck__SubMessage **repeated_msg;
  Foo__TestMessageCheck__SubMessage *optional_msg;
  char *required_string;
  size_t n_repeated_string;
  char **repeated_string;
  char *optional_string;
  ProtobufCBinaryData required_bytes;
  size_t n_repeated_bytes;
  ProtobufCBinaryData *repeated_bytes;
  protobuf_c_boolean has_optional_bytes;
  ProtobufCBinaryData optional_bytes;
};
#define FOO__TEST_MESSAGE_CHECK__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&foo__test_message_check__descriptor) \
    , NULL, 0,NULL, NULL, NULL, 0,NULL, NULL, {0,NULL}, 0,NULL, 0, {0,NULL} }


struct  _Foo__TestMessSubMess
{
  ProtobufCMessage base;
  Foo__TestMess *rep_mess;
  Foo__TestMessOptional *opt_mess;
  Foo__TestMessOneof *oneof_mess;
  Foo__SubMess *req_mess;
  Foo__DefaultOptionalValues *def_mess;
};
#define FOO__TEST_MESS_SUB_MESS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&foo__test_mess_sub_mess__descriptor) \
    , NULL, NULL, NULL, NULL, NULL }


/* Foo__SubMess__SubSubMess methods */
void   foo__sub_mess__sub_sub_mess__init
                     (Foo__SubMess__SubSubMess         *message);
/* Foo__SubMess methods */
void   foo__sub_mess__init
                     (Foo__SubMess         *message);
size_t foo__sub_mess__get_packed_size
                     (const Foo__SubMess   *message);
size_t foo__sub_mess__pack
                     (const Foo__SubMess   *message,
                      uint8_t             *out);
size_t foo__sub_mess__pack_to_buffer
                     (const Foo__SubMess   *message,
                      ProtobufCBuffer     *buffer);
Foo__SubMess *
       foo__sub_mess__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   foo__sub_mess__free_unpacked
                     (Foo__SubMess *message,
                      ProtobufCAllocator *allocator);
/* Foo__TestFieldNo15 methods */
void   foo__test_field_no15__init
                     (Foo__TestFieldNo15         *message);
size_t foo__test_field_no15__get_packed_size
                     (const Foo__TestFieldNo15   *message);
size_t foo__test_field_no15__pack
                     (const Foo__TestFieldNo15   *message,
                      uint8_t             *out);
size_t foo__test_field_no15__pack_to_buffer
                     (const Foo__TestFieldNo15   *message,
                      ProtobufCBuffer     *buffer);
Foo__TestFieldNo15 *
       foo__test_field_no15__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   foo__test_field_no15__free_unpacked
                     (Foo__TestFieldNo15 *message,
                      ProtobufCAllocator *allocator);
/* Foo__TestFieldNo16 methods */
void   foo__test_field_no16__init
                     (Foo__TestFieldNo16         *message);
size_t foo__test_field_no16__get_packed_size
                     (const Foo__TestFieldNo16   *message);
size_t foo__test_field_no16__pack
                     (const Foo__TestFieldNo16   *message,
                      uint8_t             *out);
size_t foo__test_field_no16__pack_to_buffer
                     (const Foo__TestFieldNo16   *message,
                      ProtobufCBuffer     *buffer);
Foo__TestFieldNo16 *
       foo__test_field_no16__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   foo__test_field_no16__free_unpacked
                     (Foo__TestFieldNo16 *message,
                      ProtobufCAllocator *allocator);
/* Foo__TestFieldNo2047 methods */
void   foo__test_field_no2047__init
                     (Foo__TestFieldNo2047         *message);
size_t foo__test_field_no2047__get_packed_size
                     (const Foo__TestFieldNo2047   *message);
size_t foo__test_field_no2047__pack
                     (const Foo__TestFieldNo2047   *message,
                      uint8_t             *out);
size_t foo__test_field_no2047__pack_to_buffer
                     (const Foo__TestFieldNo2047   *message,
                      ProtobufCBuffer     *buffer);
Foo__TestFieldNo2047 *
       foo__test_field_no2047__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   foo__test_field_no2047__free_unpacked
                     (Foo__TestFieldNo2047 *message,
                      ProtobufCAllocator *allocator);
/* Foo__TestFieldNo2048 methods */
void   foo__test_field_no2048__init
                     (Foo__TestFieldNo2048         *message);
size_t foo__test_field_no2048__get_packed_size
                     (const Foo__TestFieldNo2048   *message);
size_t foo__test_field_no2048__pack
                     (const Foo__TestFieldNo2048   *message,
                      uint8_t             *out);
size_t foo__test_field_no2048__pack_to_buffer
                     (const Foo__TestFieldNo2048   *message,
                      ProtobufCBuffer     *buffer);
Foo__TestFieldNo2048 *
       foo__test_field_no2048__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   foo__test_field_no2048__free_unpacked
                     (Foo__TestFieldNo2048 *message,
                      ProtobufCAllocator *allocator);
/* Foo__TestFieldNo262143 methods */
void   foo__test_field_no262143__init
                     (Foo__TestFieldNo262143         *message);
size_t foo__test_field_no262143__get_packed_size
                     (const Foo__TestFieldNo262143   *message);
size_t foo__test_field_no262143__pack
                     (const Foo__TestFieldNo262143   *message,
                      uint8_t             *out);
size_t foo__test_field_no262143__pack_to_buffer
                     (const Foo__TestFieldNo262143   *message,
                      ProtobufCBuffer     *buffer);
Foo__TestFieldNo262143 *
       foo__test_field_no262143__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   foo__test_field_no262143__free_unpacked
                     (Foo__TestFieldNo262143 *message,
                      ProtobufCAllocator *allocator);
/* Foo__TestFieldNo262144 methods */
void   foo__test_field_no262144__init
                     (Foo__TestFieldNo262144         *message);
size_t foo__test_field_no262144__get_packed_size
                     (const Foo__TestFieldNo262144   *message);
size_t foo__test_field_no262144__pack
                     (const Foo__TestFieldNo262144   *message,
                      uint8_t             *out);
size_t foo__test_field_no262144__pack_to_buffer
                     (const Foo__TestFieldNo262144   *message,
                      ProtobufCBuffer     *buffer);
Foo__TestFieldNo262144 *
       foo__test_field_no262144__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   foo__test_field_no262144__free_unpacked
                     (Foo__TestFieldNo262144 *message,
                      ProtobufCAllocator *allocator);
/* Foo__TestFieldNo33554431 methods */
void   foo__test_field_no33554431__init
                     (Foo__TestFieldNo33554431         *message);
size_t foo__test_field_no33554431__get_packed_size
                     (const Foo__TestFieldNo33554431   *message);
size_t foo__test_field_no33554431__pack
                     (const Foo__TestFieldNo33554431   *message,
                      uint8_t             *out);
size_t foo__test_field_no33554431__pack_to_buffer
                     (const Foo__TestFieldNo33554431   *message,
                      ProtobufCBuffer     *buffer);
Foo__TestFieldNo33554431 *
       foo__test_field_no33554431__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   foo__test_field_no33554431__free_unpacked
                     (Foo__TestFieldNo33554431 *message,
                      ProtobufCAllocator *allocator);
/* Foo__TestFieldNo33554432 methods */
void   foo__test_field_no33554432__init
                     (Foo__TestFieldNo33554432         *message);
size_t foo__test_field_no33554432__get_packed_size
                     (const Foo__TestFieldNo33554432   *message);
size_t foo__test_field_no33554432__pack
                     (const Foo__TestFieldNo33554432   *message,
                      uint8_t             *out);
size_t foo__test_field_no33554432__pack_to_buffer
                     (const Foo__TestFieldNo33554432   *message,
                      ProtobufCBuffer     *buffer);
Foo__TestFieldNo33554432 *
       foo__test_field_no33554432__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   foo__test_field_no33554432__free_unpacked
                     (Foo__TestFieldNo33554432 *message,
                      ProtobufCAllocator *allocator);
/* Foo__TestMess methods */
void   foo__test_mess__init
                     (Foo__TestMess         *message);
size_t foo__test_mess__get_packed_size
                     (const Foo__TestMess   *message);
size_t foo__test_mess__pack
                     (const Foo__TestMess   *message,
                      uint8_t             *out);
size_t foo__test_mess__pack_to_buffer
                     (const Foo__TestMess   *message,
                      ProtobufCBuffer     *buffer);
Foo__TestMess *
       foo__test_mess__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   foo__test_mess__free_unpacked
                     (Foo__TestMess *message,
                      ProtobufCAllocator *allocator);
/* Foo__TestMessPacked methods */
void   foo__test_mess_packed__init
                     (Foo__TestMessPacked         *message);
size_t foo__test_mess_packed__get_packed_size
                     (const Foo__TestMessPacked   *message);
size_t foo__test_mess_packed__pack
                     (const Foo__TestMessPacked   *message,
                      uint8_t             *out);
size_t foo__test_mess_packed__pack_to_buffer
                     (const Foo__TestMessPacked   *message,
                      ProtobufCBuffer     *buffer);
Foo__TestMessPacked *
       foo__test_mess_packed__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   foo__test_mess_packed__free_unpacked
                     (Foo__TestMessPacked *message,
                      ProtobufCAllocator *allocator);
/* Foo__TestMessOptional methods */
void   foo__test_mess_optional__init
                     (Foo__TestMessOptional         *message);
size_t foo__test_mess_optional__get_packed_size
                     (const Foo__TestMessOptional   *message);
size_t foo__test_mess_optional__pack
                     (const Foo__TestMessOptional   *message,
                      uint8_t             *out);
size_t foo__test_mess_optional__pack_to_buffer
                     (const Foo__TestMessOptional   *message,
                      ProtobufCBuffer     *buffer);
Foo__TestMessOptional *
       foo__test_mess_optional__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   foo__test_mess_optional__free_unpacked
                     (Foo__TestMessOptional *message,
                      ProtobufCAllocator *allocator);
/* Foo__TestMessOneof methods */
void   foo__test_mess_oneof__init
                     (Foo__TestMessOneof         *message);
size_t foo__test_mess_oneof__get_packed_size
                     (const Foo__TestMessOneof   *message);
size_t foo__test_mess_oneof__pack
                     (const Foo__TestMessOneof   *message,
                      uint8_t             *out);
size_t foo__test_mess_oneof__pack_to_buffer
                     (const Foo__TestMessOneof   *message,
                      ProtobufCBuffer     *buffer);
Foo__TestMessOneof *
       foo__test_mess_oneof__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   foo__test_mess_oneof__free_unpacked
                     (Foo__TestMessOneof *message,
                      ProtobufCAllocator *allocator);
/* Foo__TestMessRequiredInt32 methods */
void   foo__test_mess_required_int32__init
                     (Foo__TestMessRequiredInt32         *message);
size_t foo__test_mess_required_int32__get_packed_size
                     (const Foo__TestMessRequiredInt32   *message);
size_t foo__test_mess_required_int32__pack
                     (const Foo__TestMessRequiredInt32   *message,
                      uint8_t             *out);
size_t foo__test_mess_required_int32__pack_to_buffer
                     (const Foo__TestMessRequiredInt32   *message,
                      ProtobufCBuffer     *buffer);
Foo__TestMessRequiredInt32 *
       foo__test_mess_required_int32__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   foo__test_mess_required_int32__free_unpacked
                     (Foo__TestMessRequiredInt32 *message,
                      ProtobufCAllocator *allocator);
/* Foo__TestMessRequiredSInt32 methods */
void   foo__test_mess_required_sint32__init
                     (Foo__TestMessRequiredSInt32         *message);
size_t foo__test_mess_required_sint32__get_packed_size
                     (const Foo__TestMessRequiredSInt32   *message);
size_t foo__test_mess_required_sint32__pack
                     (const Foo__TestMessRequiredSInt32   *message,
                      uint8_t             *out);
size_t foo__test_mess_required_sint32__pack_to_buffer
                     (const Foo__TestMessRequiredSInt32   *message,
                      ProtobufCBuffer     *buffer);
Foo__TestMessRequiredSInt32 *
       foo__test_mess_required_sint32__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   foo__test_mess_required_sint32__free_unpacked
                     (Foo__TestMessRequiredSInt32 *message,
                      ProtobufCAllocator *allocator);
/* Foo__TestMessRequiredSFixed32 methods */
void   foo__test_mess_required_sfixed32__init
                     (Foo__TestMessRequiredSFixed32         *message);
size_t foo__test_mess_required_sfixed32__get_packed_size
                     (const Foo__TestMessRequiredSFixed32   *message);
size_t foo__test_mess_required_sfixed32__pack
                     (const Foo__TestMessRequiredSFixed32   *message,
                      uint8_t             *out);
size_t foo__test_mess_required_sfixed32__pack_to_buffer
                     (const Foo__TestMessRequiredSFixed32   *message,
                      ProtobufCBuffer     *buffer);
Foo__TestMessRequiredSFixed32 *
       foo__test_mess_required_sfixed32__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   foo__test_mess_required_sfixed32__free_unpacked
                     (Foo__TestMessRequiredSFixed32 *message,
                      ProtobufCAllocator *allocator);
/* Foo__TestMessRequiredInt64 methods */
void   foo__test_mess_required_int64__init
                     (Foo__TestMessRequiredInt64         *message);
size_t foo__test_mess_required_int64__get_packed_size
                     (const Foo__TestMessRequiredInt64   *message);
size_t foo__test_mess_required_int64__pack
                     (const Foo__TestMessRequiredInt64   *message,
                      uint8_t             *out);
size_t foo__test_mess_required_int64__pack_to_buffer
                     (const Foo__TestMessRequiredInt64   *message,
                      ProtobufCBuffer     *buffer);
Foo__TestMessRequiredInt64 *
       foo__test_mess_required_int64__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   foo__test_mess_required_int64__free_unpacked
                     (Foo__TestMessRequiredInt64 *message,
                      ProtobufCAllocator *allocator);
/* Foo__TestMessRequiredSInt64 methods */
void   foo__test_mess_required_sint64__init
                     (Foo__TestMessRequiredSInt64         *message);
size_t foo__test_mess_required_sint64__get_packed_size
                     (const Foo__TestMessRequiredSInt64   *message);
size_t foo__test_mess_required_sint64__pack
                     (const Foo__TestMessRequiredSInt64   *message,
                      uint8_t             *out);
size_t foo__test_mess_required_sint64__pack_to_buffer
                     (const Foo__TestMessRequiredSInt64   *message,
                      ProtobufCBuffer     *buffer);
Foo__TestMessRequiredSInt64 *
       foo__test_mess_required_sint64__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   foo__test_mess_required_sint64__free_unpacked
                     (Foo__TestMessRequiredSInt64 *message,
                      ProtobufCAllocator *allocator);
/* Foo__TestMessRequiredSFixed64 methods */
void   foo__test_mess_required_sfixed64__init
                     (Foo__TestMessRequiredSFixed64         *message);
size_t foo__test_mess_required_sfixed64__get_packed_size
                     (const Foo__TestMessRequiredSFixed64   *message);
size_t foo__test_mess_required_sfixed64__pack
                     (const Foo__TestMessRequiredSFixed64   *message,
                      uint8_t             *out);
size_t foo__test_mess_required_sfixed64__pack_to_buffer
                     (const Foo__TestMessRequiredSFixed64   *message,
                      ProtobufCBuffer     *buffer);
Foo__TestMessRequiredSFixed64 *
       foo__test_mess_required_sfixed64__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   foo__test_mess_required_sfixed64__free_unpacked
                     (Foo__TestMessRequiredSFixed64 *message,
                      ProtobufCAllocator *allocator);
/* Foo__TestMessRequiredUInt32 methods */
void   foo__test_mess_required_uint32__init
                     (Foo__TestMessRequiredUInt32         *message);
size_t foo__test_mess_required_uint32__get_packed_size
                     (const Foo__TestMessRequiredUInt32   *message);
size_t foo__test_mess_required_uint32__pack
                     (const Foo__TestMessRequiredUInt32   *message,
                      uint8_t             *out);
size_t foo__test_mess_required_uint32__pack_to_buffer
                     (const Foo__TestMessRequiredUInt32   *message,
                      ProtobufCBuffer     *buffer);
Foo__TestMessRequiredUInt32 *
       foo__test_mess_required_uint32__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   foo__test_mess_required_uint32__free_unpacked
                     (Foo__TestMessRequiredUInt32 *message,
                      ProtobufCAllocator *allocator);
/* Foo__TestMessRequiredFixed32 methods */
void   foo__test_mess_required_fixed32__init
                     (Foo__TestMessRequiredFixed32         *message);
size_t foo__test_mess_required_fixed32__get_packed_size
                     (const Foo__TestMessRequiredFixed32   *message);
size_t foo__test_mess_required_fixed32__pack
                     (const Foo__TestMessRequiredFixed32   *message,
                      uint8_t             *out);
size_t foo__test_mess_required_fixed32__pack_to_buffer
                     (const Foo__TestMessRequiredFixed32   *message,
                      ProtobufCBuffer     *buffer);
Foo__TestMessRequiredFixed32 *
       foo__test_mess_required_fixed32__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   foo__test_mess_required_fixed32__free_unpacked
                     (Foo__TestMessRequiredFixed32 *message,
                      ProtobufCAllocator *allocator);
/* Foo__TestMessRequiredUInt64 methods */
void   foo__test_mess_required_uint64__init
                     (Foo__TestMessRequiredUInt64         *message);
size_t foo__test_mess_required_uint64__get_packed_size
                     (const Foo__TestMessRequiredUInt64   *message);
size_t foo__test_mess_required_uint64__pack
                     (const Foo__TestMessRequiredUInt64   *message,
                      uint8_t             *out);
size_t foo__test_mess_required_uint64__pack_to_buffer
                     (const Foo__TestMessRequiredUInt64   *message,
                      ProtobufCBuffer     *buffer);
Foo__TestMessRequiredUInt64 *
       foo__test_mess_required_uint64__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   foo__test_mess_required_uint64__free_unpacked
                     (Foo__TestMessRequiredUInt64 *message,
                      ProtobufCAllocator *allocator);
/* Foo__TestMessRequiredFixed64 methods */
void   foo__test_mess_required_fixed64__init
                     (Foo__TestMessRequiredFixed64         *message);
size_t foo__test_mess_required_fixed64__get_packed_size
                     (const Foo__TestMessRequiredFixed64   *message);
size_t foo__test_mess_required_fixed64__pack
                     (const Foo__TestMessRequiredFixed64   *message,
                      uint8_t             *out);
size_t foo__test_mess_required_fixed64__pack_to_buffer
                     (const Foo__TestMessRequiredFixed64   *message,
                      ProtobufCBuffer     *buffer);
Foo__TestMessRequiredFixed64 *
       foo__test_mess_required_fixed64__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   foo__test_mess_required_fixed64__free_unpacked
                     (Foo__TestMessRequiredFixed64 *message,
                      ProtobufCAllocator *allocator);
/* Foo__TestMessRequiredFloat methods */
void   foo__test_mess_required_float__init
                     (Foo__TestMessRequiredFloat         *message);
size_t foo__test_mess_required_float__get_packed_size
                     (const Foo__TestMessRequiredFloat   *message);
size_t foo__test_mess_required_float__pack
                     (const Foo__TestMessRequiredFloat   *message,
                      uint8_t             *out);
size_t foo__test_mess_required_float__pack_to_buffer
                     (const Foo__TestMessRequiredFloat   *message,
                      ProtobufCBuffer     *buffer);
Foo__TestMessRequiredFloat *
       foo__test_mess_required_float__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   foo__test_mess_required_float__free_unpacked
                     (Foo__TestMessRequiredFloat *message,
                      ProtobufCAllocator *allocator);
/* Foo__TestMessRequiredDouble methods */
void   foo__test_mess_required_double__init
                     (Foo__TestMessRequiredDouble         *message);
size_t foo__test_mess_required_double__get_packed_size
                     (const Foo__TestMessRequiredDouble   *message);
size_t foo__test_mess_required_double__pack
                     (const Foo__TestMessRequiredDouble   *message,
                      uint8_t             *out);
size_t foo__test_mess_required_double__pack_to_buffer
                     (const Foo__TestMessRequiredDouble   *message,
                      ProtobufCBuffer     *buffer);
Foo__TestMessRequiredDouble *
       foo__test_mess_required_double__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   foo__test_mess_required_double__free_unpacked
                     (Foo__TestMessRequiredDouble *message,
                      ProtobufCAllocator *allocator);
/* Foo__TestMessRequiredBool methods */
void   foo__test_mess_required_bool__init
                     (Foo__TestMessRequiredBool         *message);
size_t foo__test_mess_required_bool__get_packed_size
                     (const Foo__TestMessRequiredBool   *message);
size_t foo__test_mess_required_bool__pack
                     (const Foo__TestMessRequiredBool   *message,
                      uint8_t             *out);
size_t foo__test_mess_required_bool__pack_to_buffer
                     (const Foo__TestMessRequiredBool   *message,
                      ProtobufCBuffer     *buffer);
Foo__TestMessRequiredBool *
       foo__test_mess_required_bool__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   foo__test_mess_required_bool__free_unpacked
                     (Foo__TestMessRequiredBool *message,
                      ProtobufCAllocator *allocator);
/* Foo__TestMessRequiredEnum methods */
void   foo__test_mess_required_enum__init
                     (Foo__TestMessRequiredEnum         *message);
size_t foo__test_mess_required_enum__get_packed_size
                     (const Foo__TestMessRequiredEnum   *message);
size_t foo__test_mess_required_enum__pack
                     (const Foo__TestMessRequiredEnum   *message,
                      uint8_t             *out);
size_t foo__test_mess_required_enum__pack_to_buffer
                     (const Foo__TestMessRequiredEnum   *message,
                      ProtobufCBuffer     *buffer);
Foo__TestMessRequiredEnum *
       foo__test_mess_required_enum__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   foo__test_mess_required_enum__free_unpacked
                     (Foo__TestMessRequiredEnum *message,
                      ProtobufCAllocator *allocator);
/* Foo__TestMessRequiredEnumSmall methods */
void   foo__test_mess_required_enum_small__init
                     (Foo__TestMessRequiredEnumSmall         *message);
size_t foo__test_mess_required_enum_small__get_packed_size
                     (const Foo__TestMessRequiredEnumSmall   *message);
size_t foo__test_mess_required_enum_small__pack
                     (const Foo__TestMessRequiredEnumSmall   *message,
                      uint8_t             *out);
size_t foo__test_mess_required_enum_small__pack_to_buffer
                     (const Foo__TestMessRequiredEnumSmall   *message,
                      ProtobufCBuffer     *buffer);
Foo__TestMessRequiredEnumSmall *
       foo__test_mess_required_enum_small__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   foo__test_mess_required_enum_small__free_unpacked
                     (Foo__TestMessRequiredEnumSmall *message,
                      ProtobufCAllocator *allocator);
/* Foo__TestMessRequiredString methods */
void   foo__test_mess_required_string__init
                     (Foo__TestMessRequiredString         *message);
size_t foo__test_mess_required_string__get_packed_size
                     (const Foo__TestMessRequiredString   *message);
size_t foo__test_mess_required_string__pack
                     (const Foo__TestMessRequiredString   *message,
                      uint8_t             *out);
size_t foo__test_mess_required_string__pack_to_buffer
                     (const Foo__TestMessRequiredString   *message,
                      ProtobufCBuffer     *buffer);
Foo__TestMessRequiredString *
       foo__test_mess_required_string__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   foo__test_mess_required_string__free_unpacked
                     (Foo__TestMessRequiredString *message,
                      ProtobufCAllocator *allocator);
/* Foo__TestMessRequiredBytes methods */
void   foo__test_mess_required_bytes__init
                     (Foo__TestMessRequiredBytes         *message);
size_t foo__test_mess_required_bytes__get_packed_size
                     (const Foo__TestMessRequiredBytes   *message);
size_t foo__test_mess_required_bytes__pack
                     (const Foo__TestMessRequiredBytes   *message,
                      uint8_t             *out);
size_t foo__test_mess_required_bytes__pack_to_buffer
                     (const Foo__TestMessRequiredBytes   *message,
                      ProtobufCBuffer     *buffer);
Foo__TestMessRequiredBytes *
       foo__test_mess_required_bytes__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   foo__test_mess_required_bytes__free_unpacked
                     (Foo__TestMessRequiredBytes *message,
                      ProtobufCAllocator *allocator);
/* Foo__TestMessRequiredMessage methods */
void   foo__test_mess_required_message__init
                     (Foo__TestMessRequiredMessage         *message);
size_t foo__test_mess_required_message__get_packed_size
                     (const Foo__TestMessRequiredMessage   *message);
size_t foo__test_mess_required_message__pack
                     (const Foo__TestMessRequiredMessage   *message,
                      uint8_t             *out);
size_t foo__test_mess_required_message__pack_to_buffer
                     (const Foo__TestMessRequiredMessage   *message,
                      ProtobufCBuffer     *buffer);
Foo__TestMessRequiredMessage *
       foo__test_mess_required_message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   foo__test_mess_required_message__free_unpacked
                     (Foo__TestMessRequiredMessage *message,
                      ProtobufCAllocator *allocator);
/* Foo__EmptyMess methods */
void   foo__empty_mess__init
                     (Foo__EmptyMess         *message);
size_t foo__empty_mess__get_packed_size
                     (const Foo__EmptyMess   *message);
size_t foo__empty_mess__pack
                     (const Foo__EmptyMess   *message,
                      uint8_t             *out);
size_t foo__empty_mess__pack_to_buffer
                     (const Foo__EmptyMess   *message,
                      ProtobufCBuffer     *buffer);
Foo__EmptyMess *
       foo__empty_mess__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   foo__empty_mess__free_unpacked
                     (Foo__EmptyMess *message,
                      ProtobufCAllocator *allocator);
/* Foo__DefaultRequiredValues methods */
void   foo__default_required_values__init
                     (Foo__DefaultRequiredValues         *message);
size_t foo__default_required_values__get_packed_size
                     (const Foo__DefaultRequiredValues   *message);
size_t foo__default_required_values__pack
                     (const Foo__DefaultRequiredValues   *message,
                      uint8_t             *out);
size_t foo__default_required_values__pack_to_buffer
                     (const Foo__DefaultRequiredValues   *message,
                      ProtobufCBuffer     *buffer);
Foo__DefaultRequiredValues *
       foo__default_required_values__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   foo__default_required_values__free_unpacked
                     (Foo__DefaultRequiredValues *message,
                      ProtobufCAllocator *allocator);
/* Foo__DefaultOptionalValues methods */
void   foo__default_optional_values__init
                     (Foo__DefaultOptionalValues         *message);
size_t foo__default_optional_values__get_packed_size
                     (const Foo__DefaultOptionalValues   *message);
size_t foo__default_optional_values__pack
                     (const Foo__DefaultOptionalValues   *message,
                      uint8_t             *out);
size_t foo__default_optional_values__pack_to_buffer
                     (const Foo__DefaultOptionalValues   *message,
                      ProtobufCBuffer     *buffer);
Foo__DefaultOptionalValues *
       foo__default_optional_values__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   foo__default_optional_values__free_unpacked
                     (Foo__DefaultOptionalValues *message,
                      ProtobufCAllocator *allocator);
/* Foo__LowerCase methods */
void   foo__lower_case__init
                     (Foo__LowerCase         *message);
size_t foo__lower_case__get_packed_size
                     (const Foo__LowerCase   *message);
size_t foo__lower_case__pack
                     (const Foo__LowerCase   *message,
                      uint8_t             *out);
size_t foo__lower_case__pack_to_buffer
                     (const Foo__LowerCase   *message,
                      ProtobufCBuffer     *buffer);
Foo__LowerCase *
       foo__lower_case__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   foo__lower_case__free_unpacked
                     (Foo__LowerCase *message,
                      ProtobufCAllocator *allocator);
/* Foo__AllocValues methods */
void   foo__alloc_values__init
                     (Foo__AllocValues         *message);
size_t foo__alloc_values__get_packed_size
                     (const Foo__AllocValues   *message);
size_t foo__alloc_values__pack
                     (const Foo__AllocValues   *message,
                      uint8_t             *out);
size_t foo__alloc_values__pack_to_buffer
                     (const Foo__AllocValues   *message,
                      ProtobufCBuffer     *buffer);
Foo__AllocValues *
       foo__alloc_values__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   foo__alloc_values__free_unpacked
                     (Foo__AllocValues *message,
                      ProtobufCAllocator *allocator);
/* Foo__TestRequiredFieldsBitmap methods */
void   foo__test_required_fields_bitmap__init
                     (Foo__TestRequiredFieldsBitmap         *message);
size_t foo__test_required_fields_bitmap__get_packed_size
                     (const Foo__TestRequiredFieldsBitmap   *message);
size_t foo__test_required_fields_bitmap__pack
                     (const Foo__TestRequiredFieldsBitmap   *message,
                      uint8_t             *out);
size_t foo__test_required_fields_bitmap__pack_to_buffer
                     (const Foo__TestRequiredFieldsBitmap   *message,
                      ProtobufCBuffer     *buffer);
Foo__TestRequiredFieldsBitmap *
       foo__test_required_fields_bitmap__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   foo__test_required_fields_bitmap__free_unpacked
                     (Foo__TestRequiredFieldsBitmap *message,
                      ProtobufCAllocator *allocator);
/* Foo__TestFieldFlags methods */
void   foo__test_field_flags__init
                     (Foo__TestFieldFlags         *message);
size_t foo__test_field_flags__get_packed_size
                     (const Foo__TestFieldFlags   *message);
size_t foo__test_field_flags__pack
                     (const Foo__TestFieldFlags   *message,
                      uint8_t             *out);
size_t foo__test_field_flags__pack_to_buffer
                     (const Foo__TestFieldFlags   *message,
                      ProtobufCBuffer     *buffer);
Foo__TestFieldFlags *
       foo__test_field_flags__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   foo__test_field_flags__free_unpacked
                     (Foo__TestFieldFlags *message,
                      ProtobufCAllocator *allocator);
/* Foo__TestMessageCheck__SubMessage methods */
void   foo__test_message_check__sub_message__init
                     (Foo__TestMessageCheck__SubMessage         *message);
/* Foo__TestMessageCheck methods */
void   foo__test_message_check__init
                     (Foo__TestMessageCheck         *message);
size_t foo__test_message_check__get_packed_size
                     (const Foo__TestMessageCheck   *message);
size_t foo__test_message_check__pack
                     (const Foo__TestMessageCheck   *message,
                      uint8_t             *out);
size_t foo__test_message_check__pack_to_buffer
                     (const Foo__TestMessageCheck   *message,
                      ProtobufCBuffer     *buffer);
Foo__TestMessageCheck *
       foo__test_message_check__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   foo__test_message_check__free_unpacked
                     (Foo__TestMessageCheck *message,
                      ProtobufCAllocator *allocator);
/* Foo__TestMessSubMess methods */
void   foo__test_mess_sub_mess__init
                     (Foo__TestMessSubMess         *message);
size_t foo__test_mess_sub_mess__get_packed_size
                     (const Foo__TestMessSubMess   *message);
size_t foo__test_mess_sub_mess__pack
                     (const Foo__TestMessSubMess   *message,
                      uint8_t             *out);
size_t foo__test_mess_sub_mess__pack_to_buffer
                     (const Foo__TestMessSubMess   *message,
                      ProtobufCBuffer     *buffer);
Foo__TestMessSubMess *
       foo__test_mess_sub_mess__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   foo__test_mess_sub_mess__free_unpacked
                     (Foo__TestMessSubMess *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Foo__SubMess__SubSubMess_Closure)
                 (const Foo__SubMess__SubSubMess *message,
                  void *closure_data);
typedef void (*Foo__SubMess_Closure)
                 (const Foo__SubMess *message,
                  void *closure_data);
typedef void (*Foo__TestFieldNo15_Closure)
                 (const Foo__TestFieldNo15 *message,
                  void *closure_data);
typedef void (*Foo__TestFieldNo16_Closure)
                 (const Foo__TestFieldNo16 *message,
                  void *closure_data);
typedef void (*Foo__TestFieldNo2047_Closure)
                 (const Foo__TestFieldNo2047 *message,
                  void *closure_data);
typedef void (*Foo__TestFieldNo2048_Closure)
                 (const Foo__TestFieldNo2048 *message,
                  void *closure_data);
typedef void (*Foo__TestFieldNo262143_Closure)
                 (const Foo__TestFieldNo262143 *message,
                  void *closure_data);
typedef void (*Foo__TestFieldNo262144_Closure)
                 (const Foo__TestFieldNo262144 *message,
                  void *closure_data);
typedef void (*Foo__TestFieldNo33554431_Closure)
                 (const Foo__TestFieldNo33554431 *message,
                  void *closure_data);
typedef void (*Foo__TestFieldNo33554432_Closure)
                 (const Foo__TestFieldNo33554432 *message,
                  void *closure_data);
typedef void (*Foo__TestMess_Closure)
                 (const Foo__TestMess *message,
                  void *closure_data);
typedef void (*Foo__TestMessPacked_Closure)
                 (const Foo__TestMessPacked *message,
                  void *closure_data);
typedef void (*Foo__TestMessOptional_Closure)
                 (const Foo__TestMessOptional *message,
                  void *closure_data);
typedef void (*Foo__TestMessOneof_Closure)
                 (const Foo__TestMessOneof *message,
                  void *closure_data);
typedef void (*Foo__TestMessRequiredInt32_Closure)
                 (const Foo__TestMessRequiredInt32 *message,
                  void *closure_data);
typedef void (*Foo__TestMessRequiredSInt32_Closure)
                 (const Foo__TestMessRequiredSInt32 *message,
                  void *closure_data);
typedef void (*Foo__TestMessRequiredSFixed32_Closure)
                 (const Foo__TestMessRequiredSFixed32 *message,
                  void *closure_data);
typedef void (*Foo__TestMessRequiredInt64_Closure)
                 (const Foo__TestMessRequiredInt64 *message,
                  void *closure_data);
typedef void (*Foo__TestMessRequiredSInt64_Closure)
                 (const Foo__TestMessRequiredSInt64 *message,
                  void *closure_data);
typedef void (*Foo__TestMessRequiredSFixed64_Closure)
                 (const Foo__TestMessRequiredSFixed64 *message,
                  void *closure_data);
typedef void (*Foo__TestMessRequiredUInt32_Closure)
                 (const Foo__TestMessRequiredUInt32 *message,
                  void *closure_data);
typedef void (*Foo__TestMessRequiredFixed32_Closure)
                 (const Foo__TestMessRequiredFixed32 *message,
                  void *closure_data);
typedef void (*Foo__TestMessRequiredUInt64_Closure)
                 (const Foo__TestMessRequiredUInt64 *message,
                  void *closure_data);
typedef void (*Foo__TestMessRequiredFixed64_Closure)
                 (const Foo__TestMessRequiredFixed64 *message,
                  void *closure_data);
typedef void (*Foo__TestMessRequiredFloat_Closure)
                 (const Foo__TestMessRequiredFloat *message,
                  void *closure_data);
typedef void (*Foo__TestMessRequiredDouble_Closure)
                 (const Foo__TestMessRequiredDouble *message,
                  void *closure_data);
typedef void (*Foo__TestMessRequiredBool_Closure)
                 (const Foo__TestMessRequiredBool *message,
                  void *closure_data);
typedef void (*Foo__TestMessRequiredEnum_Closure)
                 (const Foo__TestMessRequiredEnum *message,
                  void *closure_data);
typedef void (*Foo__TestMessRequiredEnumSmall_Closure)
                 (const Foo__TestMessRequiredEnumSmall *message,
                  void *closure_data);
typedef void (*Foo__TestMessRequiredString_Closure)
                 (const Foo__TestMessRequiredString *message,
                  void *closure_data);
typedef void (*Foo__TestMessRequiredBytes_Closure)
                 (const Foo__TestMessRequiredBytes *message,
                  void *closure_data);
typedef void (*Foo__TestMessRequiredMessage_Closure)
                 (const Foo__TestMessRequiredMessage *message,
                  void *closure_data);
typedef void (*Foo__EmptyMess_Closure)
                 (const Foo__EmptyMess *message,
                  void *closure_data);
typedef void (*Foo__DefaultRequiredValues_Closure)
                 (const Foo__DefaultRequiredValues *message,
                  void *closure_data);
typedef void (*Foo__DefaultOptionalValues_Closure)
                 (const Foo__DefaultOptionalValues *message,
                  void *closure_data);
typedef void (*Foo__LowerCase_Closure)
                 (const Foo__LowerCase *message,
                  void *closure_data);
typedef void (*Foo__AllocValues_Closure)
                 (const Foo__AllocValues *message,
                  void *closure_data);
typedef void (*Foo__TestRequiredFieldsBitmap_Closure)
                 (const Foo__TestRequiredFieldsBitmap *message,
                  void *closure_data);
typedef void (*Foo__TestFieldFlags_Closure)
                 (const Foo__TestFieldFlags *message,
                  void *closure_data);
typedef void (*Foo__TestMessageCheck__SubMessage_Closure)
                 (const Foo__TestMessageCheck__SubMessage *message,
                  void *closure_data);
typedef void (*Foo__TestMessageCheck_Closure)
                 (const Foo__TestMessageCheck *message,
                  void *closure_data);
typedef void (*Foo__TestMessSubMess_Closure)
                 (const Foo__TestMessSubMess *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    foo__test_enum_small__descriptor;
extern const ProtobufCEnumDescriptor    foo__test_enum__descriptor;
extern const ProtobufCEnumDescriptor    foo__test_enum_dup_values__descriptor;
extern const ProtobufCMessageDescriptor foo__sub_mess__descriptor;
extern const ProtobufCMessageDescriptor foo__sub_mess__sub_sub_mess__descriptor;
extern const ProtobufCMessageDescriptor foo__test_field_no15__descriptor;
extern const ProtobufCMessageDescriptor foo__test_field_no16__descriptor;
extern const ProtobufCMessageDescriptor foo__test_field_no2047__descriptor;
extern const ProtobufCMessageDescriptor foo__test_field_no2048__descriptor;
extern const ProtobufCMessageDescriptor foo__test_field_no262143__descriptor;
extern const ProtobufCMessageDescriptor foo__test_field_no262144__descriptor;
extern const ProtobufCMessageDescriptor foo__test_field_no33554431__descriptor;
extern const ProtobufCMessageDescriptor foo__test_field_no33554432__descriptor;
extern const ProtobufCMessageDescriptor foo__test_mess__descriptor;
extern const ProtobufCMessageDescriptor foo__test_mess_packed__descriptor;
extern const ProtobufCMessageDescriptor foo__test_mess_optional__descriptor;
extern const ProtobufCMessageDescriptor foo__test_mess_oneof__descriptor;
extern const ProtobufCMessageDescriptor foo__test_mess_required_int32__descriptor;
extern const ProtobufCMessageDescriptor foo__test_mess_required_sint32__descriptor;
extern const ProtobufCMessageDescriptor foo__test_mess_required_sfixed32__descriptor;
extern const ProtobufCMessageDescriptor foo__test_mess_required_int64__descriptor;
extern const ProtobufCMessageDescriptor foo__test_mess_required_sint64__descriptor;
extern const ProtobufCMessageDescriptor foo__test_mess_required_sfixed64__descriptor;
extern const ProtobufCMessageDescriptor foo__test_mess_required_uint32__descriptor;
extern const ProtobufCMessageDescriptor foo__test_mess_required_fixed32__descriptor;
extern const ProtobufCMessageDescriptor foo__test_mess_required_uint64__descriptor;
extern const ProtobufCMessageDescriptor foo__test_mess_required_fixed64__descriptor;
extern const ProtobufCMessageDescriptor foo__test_mess_required_float__descriptor;
extern const ProtobufCMessageDescriptor foo__test_mess_required_double__descriptor;
extern const ProtobufCMessageDescriptor foo__test_mess_required_bool__descriptor;
extern const ProtobufCMessageDescriptor foo__test_mess_required_enum__descriptor;
extern const ProtobufCMessageDescriptor foo__test_mess_required_enum_small__descriptor;
extern const ProtobufCMessageDescriptor foo__test_mess_required_string__descriptor;
extern const ProtobufCMessageDescriptor foo__test_mess_required_bytes__descriptor;
extern const ProtobufCMessageDescriptor foo__test_mess_required_message__descriptor;
extern const ProtobufCMessageDescriptor foo__empty_mess__descriptor;
extern const ProtobufCMessageDescriptor foo__default_required_values__descriptor;
extern const ProtobufCMessageDescriptor foo__default_optional_values__descriptor;
extern const ProtobufCMessageDescriptor foo__lower_case__descriptor;
extern const ProtobufCEnumDescriptor    foo__lower_case__case_enum__descriptor;
extern const ProtobufCMessageDescriptor foo__alloc_values__descriptor;
extern const ProtobufCMessageDescriptor foo__test_required_fields_bitmap__descriptor;
extern const ProtobufCMessageDescriptor foo__test_field_flags__descriptor;
extern const ProtobufCMessageDescriptor foo__test_message_check__descriptor;
extern const ProtobufCMessageDescriptor foo__test_message_check__sub_message__descriptor;
extern const ProtobufCMessageDescriptor foo__test_mess_sub_mess__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_t_2ftest_2dfull_2eproto__INCLUDED */
